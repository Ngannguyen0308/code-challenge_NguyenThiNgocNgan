// interface WalletBalance {
//   currency: string;
//   amount: number;
// }
// interface FormattedWalletBalance {
//   currency: string;
//   amount: number;
//   formatted: string;
// }

// interface Props extends BoxProps {

// }
// const WalletPage: React.FC<Props> = (props: Props) => {
// // Error useWalletBalances and usePrices are not defined
//   const { children, ...rest } = props;
//   const balances = useWalletBalances();
//   const prices = usePrices();

//   const getPriority = (blockchain: any): number => {
//     switch (blockchain) {
//       case 'Osmosis':
//         return 100
//       case 'Ethereum':
//         return 50
//       case 'Arbitrum':
//         return 30
//       case 'Zilliqa':
//         return 20
//       case 'Neo':
//         return 20
//       default:
//         return -99
//     }
//   }

//   const sortedBalances = useMemo(() => {
//     // 1. balances.length is not too large so useMemo does not improve performance but also consumes memory.    
//     // 2. The condition in .filter() is logically incorrect, if the balance <= 0 does not need to be displayed.
//     // 3. .sort() error, if two values ​​are equal, it needs to return 0, otherwise there will be an error
//     // 4. getPriority is called multiple times when filtering and sorting. Each callback consumes unnecessary CPU.
//     // 5. In rows.map(), you are using index as key. When the list changes, the keys are misaligned, causing unnecessary re-rendering.
//     // 6. The code is traversing the Balances string twice:
//     // First time to create formattedBalances.
//     // Second time to render rows. // This is not optimal

//     return balances.filter((balance: WalletBalance) => {
//       const balancePriority = getPriority(balance.blockchain);
//       if (lhsPriority > -99) { // 7. Wrong declaration error. Change lhsPriority => balancePriority. 
//         if (balance.amount <= 0) {
//           return true;
//         }
//       }
//       return false
//     }).sort((lhs: WalletBalance, rhs: WalletBalance) => {
//       const leftPriority = getPriority(lhs.blockchain);
//       const rightPriority = getPriority(rhs.blockchain);
//       if (leftPriority > rightPriority) {
//         return -1;
//       } else if (rightPriority > leftPriority) {
//         return 1;
//       }
//     });
//   }, [balances, prices]);

//   const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
//     return {
//       ...balance,
//       formatted: balance.amount.toFixed()
//     }
//   })

//   const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
//     const usdValue = prices[balance.currency] * balance.amount;
//     return (
//       // WalletRow has not been created or imported yet 
//       <WalletRow
//         className={classes.row}
//         key={index}
//         amount={balance.amount}
//         usdValue={usdValue}
//         formattedAmount={balance.formatted}
//       />
//     )
//   })

//   return (
//     <div {...rest}>
//       {rows}
//     </div>
//   )
// }